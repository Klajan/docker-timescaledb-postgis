name: docker-build-push

on:
  workflow_dispatch:
    inputs:
      BASE_OS:
        description: 'Base OS'
        required: true
        default: 'bookworm'
      PG_VERSION:
        description: 'Postgres Major Version'
        required: true
        default: '15'
      POSTGIS_MAJOR:
        description: 'Postgis Major Version'
        required: true
        default: '3'
      TS_VERSION:
        description: 'Timescale Version'
        required: true
      TS_TUNE_VERSION:
        description: 'Timescale Tune Version/Tag'
        required: true
      TS_PARALLEL_COPY_VERSION:
        description: 'Timescale Parallel Copy Version/Tag'
        required: true

env:
  REGISTRY_IMAGE: klajan/timescaledb-postgis

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ env.REGISTRY_IMAGE }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true
          build-args: |
            PG_VERSION=${{ github.event.inputs.PG_VERSION }}
            BASE_OS=${{ github.event.inputs.BASE_OS }}
            TS_VERSION=${{ github.event.inputs.TS_VERSION }}
            POSTGIS_MAJOR=${{ github.event.inputs.POSTGIS_MAJOR }}
            TS_TUNE_VERSION=${{ github.event.inputs.TS_TUNE_VERSION }}
            TS_PARALLEL_COPY_VERSION=${{ github.event.inputs.TS_PARALLEL_COPY_VERSION }}

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"
      
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1
  
  merge:        
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          flavor: |
            latest=true
            suffix=-pg${{ github.event.inputs.PG_VERSION }},onlatest=true
          tags: |
            type=raw,value=${{ github.event.inputs.TS_VERSION }}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
          
